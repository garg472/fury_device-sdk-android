
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

final String JACOCO_FULL_REPORT_TASK = "jacocoFullReport"
final String JACOCO_REPORT_TASK = "jacocoTestReport"

tasks.withType(Test) {
    testLogging {
        events "FAILED"
        exceptionFormat "full"
    }
}

Task jacocoTestReportTask = findOrCreateJacocoTask(JACOCO_REPORT_TASK)


getVariants().all { variant ->
    JacocoReport reportTask = addConfigReportTask(variant)
    jacocoTestReportTask.dependsOn reportTask
}

Task jacocoFullReportTask = findOrCreateJacocoTask(JACOCO_FULL_REPORT_TASK)
jacocoFullReportTask.dependsOn jacocoTestReportTask

def findOrCreateJacocoTask(def taskName) {
    Task jacocoReportTask = project.tasks.findByName(taskName)
    if (!jacocoReportTask) {
        jacocoReportTask = project.task(taskName) {
            group = "reporting"
        }
    }
    return jacocoReportTask
}

def getVariants() {
    if (project.android.hasProperty('libraryVariants')) {
        return project.android.libraryVariants
    } else {
        return project.android.applicationVariants
    }
}

def addConfigReportTask(def variant) {
    def sourceDirs = sourceDirs(variant)
    def classesDir = classesDir(variant)
    def testTask = testTask(variant)
    def executionData = executionDataFile(testTask)
    JacocoReport jacocoReport = project.task("jacoco${testTask.name.capitalize()}Report", type: JacocoReport)
    jacocoReport.dependsOn testTask
    jacocoReport.group = "reporting"
    jacocoReport.description = "Generates Jacoco coverage reports for the ${variant.name} variant."
    jacocoReport.getExecutionData().setFrom(project.files(executionData))
    jacocoReport.getSourceDirectories().setFrom(project.files(sourceDirs))
    jacocoReport.getClassDirectories().setFrom(classesDir)
    jacocoReport.reports {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }
    return jacocoReport
}

static def sourceDirs(variant) {
    variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
}

def classesDir(variant) {
    def filters = ['**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/Manifest*.*',
                    '**/*Dagger*.*',
                    '**/*MembersInjector*.*',
                    '**/*_Provide*Factory*.*',
                    '**/*_Factory*.*' ]
    def javaTree = fileTree(
            dir: "$buildDir/intermediates/classes/${variant.name}",
            excludes: filters
    )
    def kotlinTree = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/${variant.name}",
            excludes: filters
    )

    return files([javaTree], [kotlinTree])
}

def testTask(variant) {
    project.tasks.withType(Test).find { task -> task.name =~ /test${variant.name.capitalize()}UnitTest/ }
}

static def executionDataFile(Task testTask) {
    testTask.jacoco.destinationFile.path
}
